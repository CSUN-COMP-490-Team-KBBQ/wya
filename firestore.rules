rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	// users
  	function isUser(userId) {
    	// check that the requesting auth matches the userId
    	return request.auth.uid == userId;
    }
    
    match /users/{USER_ID}/{anyUserFile=**} {
    	allow read: if isUser(USER_ID);
      
      // TODO: Let our api handle write rules
      allow write: if true;
    }

    // event-plans
    match /event-plans/{EVENT_PLAN_ID}/{anyEventPlanFile=**} {
      // TODO: Let our api handle read/write rules
      allow read, write: if true;
    }
    
    // events
    function isHost() {
      // check that requesting uid matches hostId
      return request.auth.uid == resource.data.hostId;
    }
    function isEventGuest(eventId) {
      // check that the requesting uid is a guest
      return exists(/databases/$(database)/documents/events/$(eventId)/guests/$(request.auth.uid));
    }
    match /events/{EVENT_ID} {
      allow read: if isHost() || isEventGuest(EVENT_ID);
      
      // TODO: Let our api handle write rules
      allow write: if true;

      match /guests/{GUEST_ID} {
        // TODO: Let our api handle read/write rules
        allow read, write: if true;
      }
    }
  }
}